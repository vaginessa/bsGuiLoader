/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package bsguiloader;
import java.awt.Cursor;
import java.awt.FileDialog;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.InputEvent;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.sql.DriverManager;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.swing.GroupLayout;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JProgressBar;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.LayoutStyle;
import javax.swing.ListSelectionModel;
import javax.swing.table.DefaultTableModel;
import javax.swing.RowFilter;
import javax.swing.WindowConstants;
import javax.swing.table.TableColumnModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import org.jsoup.*;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;
import javax.swing.ImageIcon;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.KeyStroke;
import javax.swing.SwingConstants;
import java.sql.SQLException;
import org.tmatesoft.sqljet.core.SqlJetTransactionMode;
import org.tmatesoft.sqljet.core.table.SqlJetDb;

/**
 *
 * @author David Bitterlich
 */
public class bsGuiMain extends javax.swing.JFrame implements ItemListener {
    /**
     * Creates new form bsGuiMain
     */
    private final TableRowSorter<TableModel> rowSorter;
    
    
    public bsGuiMain() {
        bsWorker = new bsBackgroundWorker();
        bsWorker.loadFromConfig();
        GuiObject = this;
        initComponents();
        
        checkSeriesFile();
        jTable1.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        jTable1.setRowSelectionAllowed(true);
        jTable1.setColumnSelectionAllowed(false);
        jTable1.setColumnSelectionInterval(0, 2);
        jTable1.setAutoCreateRowSorter(true);
        rowSorter = new TableRowSorter<>(jTable1.getModel());
        jComboBox1.addItemListener(this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new JLabel();
        jTextField1 = new JTextField();
        jButton1 = new JButton();
        jScrollPane1 = new JScrollPane();
        jTable1 = new JTable();
        jCheckBox1 = new JCheckBox();
        jButton2 = new JButton();
        jLabel2 = new JLabel();
        jComboBox1 = new JComboBox<>();
        jLabel3 = new JLabel();
        jProgressBar1 = new JProgressBar();
        jLabel4 = new JLabel();
        jProgressBar2 = new JProgressBar();
        jLabel5 = new JLabel();
        jLabel6 = new JLabel();
        jButton3 = new JButton();
        jMenuBar1 = new JMenuBar();
        jMenu1 = new JMenu();
        jMenuItem2 = new JMenuItem();
        jMenuItem3 = new JMenuItem();
        jMenu2 = new JMenu();
        jMenuItem1 = new JMenuItem();

        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        setName("Form"); // NOI18N

        jLabel1.setText("Serie:");
        jLabel1.setName("jLabel1"); // NOI18N

        jTextField1.setName("textSearch"); // NOI18N

        jButton1.setLabel("Suche");
        jButton1.setName("btnSearch"); // NOI18N
        jButton1.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        jTable1.setModel(new DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Serie", "Episoden", "Filme", "URL"
            }
        ) {
            Class[] types = new Class [] {
                String.class, String.class, Boolean.class, String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setColumnSelectionAllowed(true);
        jTable1.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
        jTable1.setDoubleBuffered(true);
        jTable1.setName("jTable1"); // NOI18N
        jTable1.addMouseListener(new MouseAdapter() {
            public void mousePressed(MouseEvent evt) {
                jTable1MousePressed(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jCheckBox1.setEnabled(false);
        jCheckBox1.setLabel("Filme herunterladen");
        jCheckBox1.setName("checkMovies"); // NOI18N
        jCheckBox1.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });

        jButton2.setText("Download starten");
        jButton2.setEnabled(false);
        jButton2.setName("btnDownload"); // NOI18N
        jButton2.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel2.setText("Hoster:");
        jLabel2.setName("jLabel2"); // NOI18N

        jComboBox1.setEnabled(false);
        jComboBox1.setName("jComboBox1"); // NOI18N

        jLabel3.setText("Gesamtfortschritt:");
        jLabel3.setName("jLabel3"); // NOI18N

        jProgressBar1.setName("jProgressBar1"); // NOI18N
        jProgressBar1.setStringPainted(true);

        jLabel4.setText("Fortschritt aktuell:");
        jLabel4.setName("jLabel4"); // NOI18N

        jProgressBar2.setName("jProgressBar2"); // NOI18N
        jProgressBar2.setStringPainted(true);

        jLabel5.setHorizontalAlignment(SwingConstants.RIGHT);
        jLabel5.setText("Aktuell:");
        jLabel5.setName("jLabel5"); // NOI18N

        jLabel6.setText("Kein Download");
        jLabel6.setName("jLabel6"); // NOI18N

        jButton3.setText("edit");
        jButton3.setEnabled(false);
        jButton3.setName("jButton3"); // NOI18N
        jButton3.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jMenuBar1.setName("jMenuBar1"); // NOI18N

        jMenu1.setLabel("Datei");
        jMenu1.setName("jMenu1"); // NOI18N

        jMenuItem2.setEnabled(false);
        jMenuItem2.setLabel("Einstellungen (noch nicht bereit)");
        jMenuItem2.setName("jMenuItem2"); // NOI18N
        jMenuItem2.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuItem3.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_F4, InputEvent.ALT_MASK));
        jMenuItem3.setLabel("Beenden");
        jMenuItem3.setName("Beenden"); // NOI18N
        jMenuItem3.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem3);

        jMenuBar1.add(jMenu1);

        jMenu2.setLabel("Hilfe");
        jMenu2.setName("jMenu2"); // NOI18N

        jMenuItem1.setLabel("Ãœber");
        jMenuItem1.setName("jMenuItem1"); // NOI18N
        jMenuItem1.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem1);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField1)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1))
                    .addComponent(jScrollPane1, GroupLayout.DEFAULT_SIZE, 577, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBox1, 0, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jCheckBox1)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton3, GroupLayout.PREFERRED_SIZE, 79, GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel5, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                            .addComponent(jProgressBar2, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jProgressBar1, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel6, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jTextField1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, GroupLayout.DEFAULT_SIZE, 347, Short.MAX_VALUE)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(jCheckBox1)
                    .addComponent(jButton2)
                    .addComponent(jLabel2)
                    .addComponent(jComboBox1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton3))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel3)
                    .addComponent(jProgressBar1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jProgressBar2, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6)))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    private void jButton1ActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        String txt = jTextField1.getText();
        jTable1.setRowSorter(rowSorter);
        if (txt.trim().length() == 0) {
            rowSorter.setRowFilter(null);
        } else {
            rowSorter.setRowFilter(RowFilter.regexFilter("(?i)" + txt));
        }
    }//GEN-LAST:event_jButton1ActionPerformed
    private void doTableEvent() {
        jComboBox1.setEnabled(false);
        jCheckBox1.setEnabled(false);
        int SelectedRow = jTable1.getSelectedRow();
        if (SelectedRow > -1 && SelectedRow < jTable1.getRowCount()) {
            try {
                int RowCount = jTable1.getRowCount();
                String SeriesURL = jTable1.getModel()
                        .getValueAt(jTable1.convertRowIndexToModel(SelectedRow), 3)
                        .toString();
                int EpisodeNumbers = getSerieEpisodes(SeriesURL);
                boolean MoviesAvailable=false;
                if (MovieLinks.size() > 0) {
                    MoviesAvailable = true;
                }
                String CellValue = String.valueOf(EpisodeNumbers);
                jTable1.setValueAt(CellValue, SelectedRow, 1);
                jTable1.setValueAt(MoviesAvailable, SelectedRow, 2);
                ListSelectionModel selectionModel = jTable1.getSelectionModel();
                selectionModel.setSelectionInterval(SelectedRow, SelectedRow);
                jComboBox1.setEnabled(true);
                jCheckBox1.setEnabled(true);
            } catch (IOException ex) {
                ex.printStackTrace();
            }
        }
    }
    private void jTable1MousePressed(MouseEvent evt) {//GEN-FIRST:event_jTable1MousePressed
        doTableEvent();
    }//GEN-LAST:event_jTable1MousePressed

    private String replaceStringByParams(String[] episodeVariables) {
        String resultStr = bsWorker.FileNameMask;
        for (String toReplaceString: episodeVariables)
        {
            String[] toReplaceArray = toReplaceString.split("/");
            resultStr = resultStr.replaceAll(toReplaceArray[0], toReplaceArray[1]);
        }
        resultStr = resultStr.replaceAll("<ext>", "%(ext)s");
        return resultStr;
    }
    private String getNulls(int input) {
        String returnString="";    
        if (input < 10) {
                returnString = "0";
        } 
        return returnString;
    }
    private String correctify(String Input) {
        String toRemove = "-.,:;/'_<>|";
        for (int i = 0; i < toRemove.length(); i++) {
            Input = Input.replace(Character.toString(toRemove.charAt(i)), "");
        }
        return Input;
    }

    private void jButton2ActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        
        if (jButton2.getText().contains("starten")) {
            //TODO: Add option to choose wether JFileChooser or FileDialog from AWT
            
            FileDialog dialog = new FileDialog(GuiObject, "Select a target directory", FileDialog.SAVE);
            dialog.setDirectory(bsWorker.userDir);
            dialog.setVisible(true);
            
            /*JFileChooser chooser = new JFileChooser();
            chooser.setCurrentDirectory(new java.io.File(bsWorker.userDir));
            chooser.setDialogTitle("Verzeichnis zum Herunterladen auswÃ¤hlen...");
            chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
            chooser.setAcceptAllFileFilterUsed(false);

            int returnValue = chooser.showOpenDialog(null);
            String FileDir="";
            if (returnValue == JFileChooser.APPROVE_OPTION) {
                bsWorker.debugPrint("Wechsle Ordner " + chooser.getSelectedFile().toString());
                FileDir = chooser.getSelectedFile().toString();
            } else {
                FileDir = "Downloads";
            }
            FileDir += File.separator + correctify(jTable1.getValueAt(jTable1.getSelectedRow(), 0).toString());
            File DownDir = new File(FileDir);
            try {
                DownDir.mkdir();
            } catch (SecurityException se) {
                se.printStackTrace();
            }
            System.setProperty("user.dir", FileDir);
            final List<String> dq = DownloadQue;
            for (String Link: DownloadQue) {
                bsWorker.debugPrint("DownloadQue: " + Link);
            }
            final String fd = FileDir;
            DownloadProcess = new bsDownProc(
                    dq,
                    getJProgressBar1(),
                    getJProgressBar2(),
                    getJButton2(),
                    getjLabel6(),
                    bsWorker.youtubeDlBinary,
                    fd,
                    jTable1.getValueAt(jTable1.getSelectedRow(), 0).toString(),
                    DownloadManagerPath,
                    bsWorker.FileNameMask
            );
            DownloadProcess.start();
        } else {
            DownloadProcess.setText("Download starten");
            DownloadProcess.stop();
            pbHandler pb1 = new pbHandler(getJProgressBar1());
            pb1.setMinimum(0);
            pb1.setMaximum(100);
            pb1.setValue(0);
            pbHandler pb2 = new pbHandler(getJProgressBar2());
            pb2.setMinimum(0);
            pb2.setMaximum(100);
            pb2.setValue(0);
            jLabel6.setText("Kein Download");*/
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jCheckBox1ActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
        if (jCheckBox1.isSelected()) {
            EpisodeListWithHoster.addAll(MovieLinks);
            if (jTable1.getSelectedRow() > -1) {
                doTableEvent();
                updateHosterComboBox();
            }
        } else {
            for (String MovieURL: MovieLinks) {
                if (EpisodeListWithHoster.contains(MovieURL)) {
                    EpisodeListWithHoster.remove(EpisodeListWithHoster.indexOf(MovieURL));
                }
                doTableEvent();
                updateHosterComboBox();
            }
        }
    }//GEN-LAST:event_jCheckBox1ActionPerformed
    // MenÃ¼eintrag Beenden
    private void jMenuItem3ActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        System.exit(0);
    }//GEN-LAST:event_jMenuItem3ActionPerformed
    // MenÃ¼eintrag Einstellungen
    private void jMenuItem2ActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem2ActionPerformed
    // MenÃ¼eintrag Ãœber
    private void jMenuItem1ActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        bsAbout aboutWindow = new bsAbout(this, true);
        aboutWindow.setVisible(true);
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jButton3ActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        bsDownloadQue bsQueEditor = new bsDownloadQue();
    }//GEN-LAST:event_jButton3ActionPerformed
    public Object getJProgressBar1() {
        return this.jProgressBar1;
    }
    public Object getJProgressBar2() {
        return this.jProgressBar2;
    }
    public Object getJButton2() {
        return this.jButton2;
    }
    public Object getjLabel6() {
        return this.jLabel6;
    }
    protected Object getBsWorker() {
        return bsWorker;
    }
    private void updateComboBoxEvent() {
        jButton2.setEnabled(false);
        jButton3.setEnabled(false);
        if (jComboBox1.isEnabled() && jComboBox1.getSelectedIndex() > 0 && !jButton2.getText().contains("abbrechen")) {
            int SelectedRow = jTable1.getSelectedRow();
            int CellValue = Integer.parseInt(jTable1.getModel()
                    .getValueAt(jTable1.convertRowIndexToModel(SelectedRow), 1).toString());
            String[] ComboCaption = jComboBox1.getItemAt(jComboBox1.getSelectedIndex()).split(":");
            int ComboValue = Integer.parseInt(ComboCaption[1].trim());
            if (!DownloadQue.contains(ComboCaption[0].trim().toLowerCase())) {
                jTable1.setValueAt(ComboValue, SelectedRow, 1);
                getAllLinksByHoster(ComboCaption[0]);
            }
            jButton2.setEnabled(true);
            jButton3.setEnabled(true);
        }
    }
    public void itemStateChanged(ItemEvent e) {
        if (e.getStateChange() == ItemEvent.SELECTED) {
            updateComboBoxEvent();
        }
    }
    /**
     * @param args the command line arguments
     */
    private List<String> EpisodeListWithHoster;
    
    private List<String> MovieLinks;

    private boolean SupportedHosterByURL(String URL) {
        String[] SplittedURL = URL.split("/");
        String Hoster = SplittedURL[SplittedURL.length-1];
        String[] HosterCleanedFromHyphen = Hoster.split("-");
        String HosterCore = HosterCleanedFromHyphen[0];
        if (hosters.contains(HosterCore.toLowerCase().trim())) {
            return true;
        }
        return false;
    }
    private int getAllLinksByHoster(String hoster) {
        DownloadQue.clear();
        int NumberOfSearchResults = 0;
        List<String> TempList = new ArrayList<String>();
        TempList.addAll(EpisodeListWithHoster);
        if (jCheckBox1.isSelected()) {
            TempList.addAll(MovieLinks);
        }
        for (String EpisodeURL: TempList) {
            String EpisodeURLLowerCase = EpisodeURL.toLowerCase();
            if (EpisodeURLLowerCase.contains(hoster.toLowerCase())) {
                NumberOfSearchResults++;
                DownloadQue.add(EpisodeURL);
            }
        }
        return NumberOfSearchResults;
    }
    private static List<String> DownloadQue = new ArrayList<String>();
    public static List<String> getDownloadQue() {
        return DownloadQue;
    }
    protected static void writeDownloadQue(List<String> TempQue) {
        DownloadQue.clear();
        DownloadQue.addAll(TempQue);
    }
    private void updateHosterComboBox() {
        jComboBox1.removeAllItems();
        jComboBox1.addItem("");
        List<String> HostersAdded = new ArrayList<String>();
        List<String> TempEpisodeList = new ArrayList<String>();
        TempEpisodeList.addAll(EpisodeListWithHoster);
        if (jCheckBox1.isSelected()) {
            TempEpisodeList.addAll(MovieLinks);
        }
        for (String SupportedHosterFromList: TempEpisodeList) {
            String[] SplittedLink = SupportedHosterFromList.split("/");
            String[] SplittedHoster = SplittedLink[SplittedLink.length-1].split("-");
            // Arbeite mit dem Hoster des Videos
            String HosterCore = SplittedHoster[0];
            if (!HosterCore.matches(".*\\d+.*")) {
                for (String HosterFromList: hosters) {
                    //System.out.println("Info: " + HosterFromList + " .... " + HosterCore + " :: " + HosterFromList.contains(HosterCore.toLowerCase()));
                    if (HosterFromList.toLowerCase().contains(HosterCore.toLowerCase())) {
                        // Check, ob Hoster bereits hinzugefÃ¼gt
                        if (!HostersAdded.contains(HosterCore.toLowerCase())) {
                            jComboBox1.addItem(
                                    HosterCore.toUpperCase() 
                                    + ": " 
                                    + getAllLinksByHoster(HosterCore)
                            );
                            HostersAdded.add(HosterCore.toLowerCase());
                        }                
                    }
                }
            }
        }
    }
    private int getSerieEpisodes(String url) throws IOException {
        EpisodeListWithHoster = new ArrayList<String>();
        MovieLinks = new ArrayList<String>();
        Document doc = Jsoup.connect(url)
                .followRedirects(true)
                .ignoreHttpErrors(true)
                .timeout(30000)
                .userAgent(bsWorker.userAgent)
                .get();
        Elements seasons = doc.select("ul.pages li:not(.button) a");
        int episodes = 0;
        for (Element SeasonPage: seasons) {
            List<String> TempEpisodes = new ArrayList<String>();
            TempEpisodes = bsWorker.getLinksFromPage(SeasonPage.attr("abs:href"), "div#sp_left table tbody tr td a");
            
            EpisodeListWithHoster.addAll(TempEpisodes);
            episodes += bsWorker.getLinksFromPage(SeasonPage.attr("abs:href"), "div#sp_left table tbody tr td a strong").size();
        }
        Elements Movies = doc.select("ul.pages li.button a");
        if (Movies.size() > 0 && Movies.get(0).text().contains("Film")) {
            List<String> TempMovies = new ArrayList<String>();
            TempMovies = bsWorker.getLinksFromPage(Movies.get(0).attr("abs:href"), "div#sp_left table tbody tr td a");
            MovieLinks.addAll(TempMovies);
            episodes += bsWorker.getLinksFromPage(Movies.get(0).attr("abs:href"), "div#sp_left table tbody tr td a strong").size();
        }
        updateHosterComboBox();
        if (jCheckBox1.isSelected()) { return EpisodeListWithHoster.size() + MovieLinks.size(); }
        return episodes;
    }
    private void readFromSeriesFile() {
        File f = new File("series.conf");
        try {
            BufferedReader br = new BufferedReader(new FileReader(f));
            String line = br.readLine();
            //System.out.println(line);
            if (line == null) {
                addSeries();
            } else {
                TableColumnModel tcm = jTable1.getColumnModel();
                tcm.removeColumn(tcm.getColumn(3));
                DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
                while (line != null) {
                    String[] lines = line.split(";");
                    if (!lines[0].isEmpty()) {
                        model.addRow(new Object[]{
                            lines[0], // Serientitel
                            "", // Anzahl Serien
                            false, // Filme verfÃ¼gbar
                            lines[1] // URL
                        }); 
                    }
                    line = br.readLine();
                }
            }
            br.close();
        } catch (Exception e) {
            e.printStackTrace();
            addSeries();
        }
    }
    private void checkSeriesFile() {
        File f = new File("series.conf");
        if (!f.exists() && !f.isDirectory()) {
            addSeries();
        } else {
            SimpleDateFormat sdf = new SimpleDateFormat("dd.MM.yyyy");
            String FileDate = sdf.format(f.lastModified());
            String Today = sdf.format(new Date());
            if (!FileDate.equals(Today)) {
                addSeries();
            } else {
                readFromSeriesFile();
            }
        }
    }
    private void addSeries()  {
        String url = "http://bs.to/andere-serien";
        try {
            Elements series;
            int repeat=0;
            TableColumnModel tcm = jTable1.getColumnModel();
            tcm.removeColumn(tcm.getColumn(3));
            File f = new File("series.conf");
            // Seriendatei entfernen, sofern sie bereits existiert.
            if (f.exists()) {
                f.delete();
            }
            PrintWriter pw = new PrintWriter(new FileOutputStream("series.conf"));
            do {
                Document doc = Jsoup.connect(url)
                    .followRedirects(true)
                    .ignoreHttpErrors(true)
                    .timeout(30000)
                    .userAgent(bsWorker.userAgent)
                    .get();
                series = doc.select("div.genre ul > li > a");
                DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
                for (int i = 0; i < series.size(); i++) {
                        Element node = series.get(i);
                        String SeriesURL = node.attr("abs:href");
                        if (!SeriesURL.isEmpty()) {
                            //SeriesPages.add(SeriesURL);
                            model.addRow(new Object[]{
                                node.text(), // Serientitel
                                "", // Anzahl Serien
                                false, // Filme verfÃ¼gbar
                                SeriesURL // URL
                            });
                            pw.println(node.text() + ";" + SeriesURL);
                        }
                }
                pw.close();
                if (series.isEmpty()) { 
                    System.err.println("Probleme beim Holen der Serien... wiederhole");
                    if (repeat > 150) {
                        System.err.println("Kann keine Verbindung zu BurningSeries aufbauen... breche ab.");
                        System.exit(1);
                    }
                    repeat++;
                }
            }
            while (series.size() == 0);
        } catch (IOException ex) {
            ex.printStackTrace();
        }
        
    }
    private List<String> hosters;
    private void loadHosters() {
        hosters = new ArrayList<String>();
        try {
            Process p = new ProcessBuilder(
            bsWorker.youtubeDlBinary, "--list-extractors").start();
            InputStream is = p.getInputStream();
            InputStreamReader isr = new InputStreamReader(is);
            BufferedReader br = new BufferedReader(isr);
            String line;

            while ((line = br.readLine()) != null) {
                hosters.add(line.toLowerCase().trim());
            }
            p.destroy();
            br.close();
        } catch (IOException ex) {
            ex.printStackTrace();
        }
    }
    // Suche nach unterstÃ¼tzten Download-Managern
    private String DownloadManagerPath = "";
    private void checkForManagers() {
        // Zurzeit wird nur aria2c unterstÃ¼tzt (youtube-dl unterstÃ¼tzt theoretisch mehr,
        // jedoch macht derzeit ausschlieÃŸlich aria2 Sinn.
        String[] managers = { "aria2c" };
        // TODO: Windows Installationspfade hinzufÃ¼gen
        String[] searchPaths = { "/usr/bin", "/usr/local/bin" };
        for (String searchPath: searchPaths) {
            for (String manager: managers) {
                File managerFile = new File(searchPath + File.separator + manager);
                if (managerFile.exists() && !managerFile.isDirectory()) {
                    DownloadManagerPath = searchPath + File.separator + manager;
                    break;
                }
            }
        }
    }

    // <editor-fold defaultstate="collapsed" desc="Creating List of supported Hosters">      
    /*private void saveList() {
        try {
            PrintWriter pw = new PrintWriter(new FileOutputStream("hosters.txt"));
            for (String line: hosters) {
                pw.println(line);
            }
            pw.close();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
    private void formatList() {
        hosters = new ArrayList<String>();
        JFileChooser chooser = new JFileChooser();
        int returnValue = chooser.showOpenDialog(null);
        if (returnValue == JFileChooser.APPROVE_OPTION) {
            File selectedFile = chooser.getSelectedFile();
            try
            {
                FileReader fr = new FileReader(selectedFile);
                BufferedReader textReader = new BufferedReader(fr);
                String line;
                while ((line = textReader.readLine()) != null) {
                    String[] LineSeperated = line.split(":");
                    if (!hosters.contains(LineSeperated[0].toLowerCase())) {
                        hosters.add(LineSeperated[0].toLowerCase());
                    }
                }
                fr.close();
                saveList();
            } catch (IOException ex) {
                ex.printStackTrace();
            }
        }
    }*/
    // </editor-fold>    

    
    /**
     *
     * @param args
     */
    public static void main(String args[]) {
        String Design;
        boolean useDesign = false;
        if (System.getProperty("os.name").contains("Linux")) {
            Design = "GTK";
        } else if (System.getProperty("os.name").contains("Windows")) {
            Design = "Windows";
        } else { Design = "Nimbus"; }
        //String Design = "Nimbus";
        if (args.length > 0) {
            switch (args[0].toLowerCase()) {
                case "--design":
                case "-d": 
                    if (!args[1].isEmpty()) {
                        Design = args[1];
                }
            }
        }
        /* Set the look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                //if (Design.toLowerCase().contains(info.getName().toLowerCase())) {
                if (info.getName().toLowerCase().contains(Design.toLowerCase())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    useDesign = true;
                    bsBackgroundWorker.guiDesign = info.getName().toLowerCase();
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(bsGuiMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(bsGuiMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(bsGuiMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(bsGuiMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                bsGuiMain MainWindow = new bsGuiMain();
                MainWindow.setTitle("Burning Series Loader");
                ImageIcon img = new ImageIcon("icon");
                MainWindow.setIconImage(img.getImage());
                MainWindow.setVisible(true);
                MainWindow.loadHosters();
                MainWindow.checkForManagers();
                //MainWindow.formatList();
                //new bsGuiMain().setVisible(true);
                //new comment
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JButton jButton1;
    private JButton jButton2;
    private JButton jButton3;
    private JCheckBox jCheckBox1;
    private JComboBox<String> jComboBox1;
    private JLabel jLabel1;
    private JLabel jLabel2;
    private JLabel jLabel3;
    private JLabel jLabel4;
    private JLabel jLabel5;
    private JLabel jLabel6;
    private JMenu jMenu1;
    private JMenu jMenu2;
    private JMenuBar jMenuBar1;
    private JMenuItem jMenuItem1;
    private JMenuItem jMenuItem2;
    private JMenuItem jMenuItem3;
    private JProgressBar jProgressBar1;
    private JProgressBar jProgressBar2;
    private JScrollPane jScrollPane1;
    private JTable jTable1;
    private JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
    //private pbHandler pbHnd_pbar1;
    private bsDownProc DownloadProcess;
    private bsBackgroundWorker bsWorker;
    private bsGuiMain GuiObject;
}
